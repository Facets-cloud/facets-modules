name: Preview Module

on:
  push:
    branches-ignore:
      - 'master'
      - 'develop'
    paths:
      - 'modules/**/facets.yaml'
      - 'modules/**/*.tf'
  workflow_dispatch:
    inputs:
      module_dirs:
        description: 'Directories of the module'
        required: true
      url:
        description: 'Control Plane URL'
        required: true
      username:
        description: 'Control Plane Username'
        required: true
      token:
        description: 'Control Plane Token'
        required: true

jobs:
  run-command:
    runs-on: iac-arc

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 2

      - name: Create control planes and secrets JSON file
        id: set_control_planes
        env:
          ALL_SECRETS: ${{ toJson(secrets) }}
        run: |
          set -e
          set -o pipefail
          if [ -n "${{ github.event.inputs.url }}" ] && [ -n "${{ github.event.inputs.username }}" ] && [ -n "${{ github.event.inputs.token }}" ]; then
            # Use provided URL, Username, and Token
            echo '{
              "provided": {
                "Name": "provided",
                "URL": "${{ github.event.inputs.url }}",
                "Username": "${{ github.event.inputs.username }}",
                "TokenRef": "PROVIDED_TOKEN"
              }
            }' > control_planes.json
            echo '{
              "PROVIDED_TOKEN": "${{ github.event.inputs.token }}"
            }' > secrets.json
          else
            JSON_CONTENT='${{ vars.DEV_CONTROL_PLANES }}'
            echo "$JSON_CONTENT" > control_planes.json
            echo "$ALL_SECRETS" > secrets.json
          fi

      - name: Get Unique Changed Directories
        id: changed_dirs
        run: |
          set -e
          set -o pipefail
          if [ -n "${{ github.event.inputs.url }}" ] && [ -n "${{ github.event.inputs.username }}" ] && [ -n "${{ github.event.inputs.token }}" ]; then
            changed_dirs=${{ github.event.inputs.module_dirs }}
          else
            # Fetch changed files
            changed_files=$(git diff --name-only HEAD^ HEAD)
            # Get unique directories from changed files as a space-separated string
            changed_dirs=$(echo "$changed_files" | xargs -n 1 dirname | sort -u | tr '\n' ' ')
          fi
          # Include only the 'intents' directory
          changed_dirs=$(echo "$changed_dirs" | tr ' ' '\n' | grep '^modules' | tr '\n' ' ')
          # Output the unique directories as an environment variable
          echo "changed_dirs=$changed_dirs"
          
          # Loop through the unique directories and check for facets.yaml
          facets_dirs=()
          for dir in "${changed_dirs[@]}"; do
              current_dir="$dir"
              while [[ "$current_dir" != "/" && "$current_dir" != "." ]]; do
                  if [[ -f "$current_dir/facets.yaml" ]] && ls $current_dir/*.tf &> /dev/null; then
                      # Check if the directory is already in the facets_dirs array
                      if ! [[ " ${facets_dirs[@]} " =~ " ${current_dir} " ]]; then
                          # Add the directory to the facets_dirs array
                          facets_dirs+=("$current_dir")
                      fi
                      break
                  else
                      # Move up to the parent directory
                      current_dir=$(dirname "$current_dir")
                  fi
              done
              if [[ "$current_dir" == "/" || "$current_dir" == "." ]]; then
                  echo "No facets.yaml along with terraform files found in $dir or any of its parent directories"
              fi
          done
          echo "facets_dirs=$facets_dirs" >> $GITHUB_ENV

      - name: Execute command
        env:
          ALL_SECRETS: ${{ toJson(secrets) }}
        run: |
          set -e
          set -o pipefail
          IFS=' ' read -r -a facets_dirs <<< "${{ env.facets_dirs }}"
          GITHUB_REF="${{ github.ref_name }}"
          for key in $(jq -r 'keys[]' control_planes.json); do
            URL=$(jq -r ".$key.URL" control_planes.json)
            USERNAME=$(jq -r ".$key.Username" control_planes.json)
            TOKEN_REF_NAME=$(jq -r ".$key.TokenRef" control_planes.json)
            TOKEN=$(jq -r ".\"$TOKEN_REF_NAME\"" secrets.json)
            # Perform the curl command for each directory in facets_dirs
            for dir in "${facets_dirs[@]}"; do
                echo "Registering module $dir to $key control plane"
                curl -s https://facets-cloud.github.io/facets-schemas/scripts/module_register.sh | bash -s -- -c "$URL" -u "$USERNAME" -t "$TOKEN" -p "$dir" -r "${GITHUB_REF}"
            done
          done
